<?php

include drupal_get_path('module', 'cassie').'/Cassie.class.php';
include drupal_get_path('module', 'cassie').'/UUID.class.php';
include drupal_get_path('module', 'cassie').'/RuleEngine.class.php';
include drupal_get_path('module', 'cassie').'/Product.class.php';


$GLOBALS['cassie'] = new Cassie();
$GLOBALS['cassie']->connect();

$GLOBALS['rule'] = new RuleEngine();

$GLOBALS['segments'] = array();

function cassie_init(){

	//$GLOBALS['cassie']->testProduct();

	if (!isset($_COOKIE["location"])){
        	$location = file_get_contents('http://freegeoip.net/json/'.$_SERVER['REMOTE_ADDR']);

	        $jsonIterator = new RecursiveIteratorIterator(
   		     	new RecursiveArrayIterator(json_decode($location, TRUE)),
        		RecursiveIteratorIterator::SELF_FIRST);

        	$arrayJson = array();

	        foreach ($jsonIterator as $key => $val) {
                	$arrayJson[] = $val;
        	}

        	$v4uuid = UUID::v4();
	        //$language = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);
        	$language = "fi";
		$ip_address = $arrayJson[0];
        	$time_zone = $arrayJson[7];
	        $country = $arrayJson[2];
        	$region = $arrayJson[4];
        	$city = $arrayJson[5];
		$os = check_user_agent();
		$cookieArray = array($v4uuid, $language, $ip_address, $time_zone, $country, $region, $city, $os);

	        $cookieJson = json_encode($cookieArray, JSON_UNESCAPED_UNICODE);

		$os = check_user_agent();
        	setcookie("location", $cookieJson, time()+3600);

	        $GLOBALS['cassie']->insertUsersSegment($v4uuid, $language, $ip_address, $time_zone, $country, $region, $city, $os);

		$visits = $GLOBALS['cassie']->checkForPromotion($v4uuid);
        	$GLOBALS['segments'] = $GLOBALS['rule']->init($visits, $language);

		return $cookieArray;
	}

	$cookie = get_cookie();
        $visits = $GLOBALS['cassie']->checkForPromotion($cookie[0]);
	$GLOBALS['segments'] = $GLOBALS['rule']->init($visits, $cookie[1]);

	check_uuid();
	drupal_add_js(drupal_get_path('module', 'cassie') . '/Timer.js');
	//time_logger();
}

function launch_help(){

	if ($_SESSION["launchHelp"] == true){

	}
}


function cassie_help($path, $args) {
  if ($path == 'admin/help#cassie') {
    return t('To use this module, go to the block page and turn on the membercount block.');
  }
}

function cassie_menu() {

  $items['timer'] = array(
    'title' => 'Timer',
    'page callback' => 'time_logger',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['pants'] = array(
    'title' => 'Pants',
    'page callback' => 'pants_page',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['jackets'] = array(
    'title' => 'Jackets',
    'page callback' => 'jackets_page',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['phones'] = array(
    'title' => 'Phones',
    'page callback' => 'phones_page',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['manage'] = array(
    'title' => 'Admin UI',
    'page callback' => 'admin_page',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  $items['add'] = array(
   'title' => 'Add product',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('add_product_page'),
   'access arguments' => array('add_product_page'),
   'access callback' => TRUE,
   'type' => MENU_CALLBACK,
  );

  $items['update'] = array(
   'title' => 'Update product',
   //'page callback' => 'update_product_page',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('update_product_page'),
   'access arguments' => array('update_product_page'),
   'access callback' => TRUE,
   'type' => MENU_CALLBACK,
  );

  $items['delete'] = array(
   'title' => 'Delete product',
   'page callback' => 'delete_product_page',
   //'page callback' => 'drupal_get_form',
   //'page arguments' => array('delete_product_page'),
   //'access arguments' => array('delete_product_page'),
   'access callback' => TRUE,
   'type' => MENU_CALLBACK,
  );

  $items['pants/%'] = array(
   'page callback' => 'pants_details',
   'access callback' => TRUE,
  );

  $items['jackets/%'] = array(
   'page callback' => 'jackets_details',
   'access callback' => TRUE,
  );

  $items['phones/%'] = array(
   'page callback' => 'phones_details',
   'access callback' => TRUE,
  );

  $items['update/%'] = array(
   //'page callback' => 'update_product_details_page',
   'access callback' => TRUE,
   'page callback' => 'drupal_get_form',
   'page arguments' => array('update_product_details_page'),
   'access arguments' => array('update_product_details_page'),
  );

 return $items;
}


function cassie_block_info() {
  $blocks['language'] = array(
    'info' => t('language'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['ad'] = array(
    'info' => t('ad'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['adHeader'] = array(
    'info' => t('adHeader'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

function cassie_block_view($delta = '') {

   switch($delta){
     case 'ad':
	$advert = $GLOBALS['segments']['advertSide'];
	//echo $advert;
	$result = $GLOBALS['cassie']->selectAd($advert);
	$row = $result->first();
        $block['content'] = "<img id='adImage' src='" . $row['image_link'] . "'/>";
     return $block;

     case 'language':
	$block['subject'] = t("Language");

	$block['content'] = "<form method='POST' action=''><div id='fi'><input type='submit' id='fiFlag' class='flags' name='fi' value=''></div>".
	"<div id='ru'><input type='submit' id='ruFlag' class='flags' name='ru' value=''></div></form>";
	select_language();
     return $block;

     case 'adHeader':
	$block['content'] = "<img id='adImageHeader' src='https://tinyurl.com/jgrkqoj' />";
     return $block;

  }

}

function select_language(){
	if (isset($_POST['fi'])) {
		$cookie = get_cookie();
		$cookieArray = array($cookie[0], "fi", $cookie[2], $cookie[3], $cookie[4], $cookie[5], $cookie[6], $cookie[7]);
		$cookieJson = json_encode($cookieArray, JSON_UNESCAPED_UNICODE);

                setcookie("location", $cookieJson, time()+3600);
		header("Location: /");

        }
        if (isset($_POST['ru'])) {
		$cookie = get_cookie();
                $cookieArray = array($cookie[0], "ru", $cookie[2], $cookie[3], $cookie[4], $cookie[5], $cookie[6], $cookie[7]);
                $cookieJson = json_encode($cookieArray, JSON_UNESCAPED_UNICODE);

                setcookie("location", $cookieJson, time()+3600);
		header("Location: /");
        }

}

function get_cookie(){
	if (isset($_COOKIE['location'])){
		$cookie = $_COOKIE['location'];
        	$cookie = stripslashes($cookie);
        	$cookieArray = json_decode($cookie, true);
		return $cookieArray;
	} else{
		return cassie_init();
	}
}


function get_products(){
	if (isset($_COOKIE['location'])){
		$cookie = get_cookie();
	}
	//echo $cookie[1];
	//$init = $GLOBALS['rule']->init($cookieArray[0], $cookieArray[1]);

	$userAgent = check_user_agent();
	//echo $userAgent;
	$address = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

	$page = substr(strrchr($address, '/'), 1);
	$test = true;
	$cookie = get_cookie();
	//$os = get_user_agent();
	//$result2 = $GLOBALS['cassie']->getProductsByOs($page, "Android");
	//$result3 = $GLOBALS['cassie']->getTest($page, "iPhone", true);

	$output = "<div>";
	$i = 0;
	$highpriority = false;
	$cookie = get_cookie();
	$visits = $GLOBALS['cassie']->checkForPromotion($cookie[0]);
	$segments = $GLOBALS['rule']->init($visits, 1);
	$highpriority = $segments['priorityHigh'];

	$result = $GLOBALS['cassie']->getProducts($page, $highpriority);

	//echo $highpriority;
	//echo $visits;
	/*if ($highpriority === 1){
		foreach ($result3 as $row) {
                	$output .= "<a href='". $page . "/" . $row['product_id'] . "'><div class='productContainer'><div class='product'><img id='productImage$i' class='productImage' src='"
                 	. $row['image_link'] . "'/><p id='productName'>" . $row['product_id'] . "</p><p id='productPrice'>" . $row['price'] .
                	" &#x20ac;</p><p id='productDescription'>" . $row['description'] . "</div></div></a>";
                	$i++;
        	}
	}*/


        foreach ($result as $row) {
                $output .= "<a href='". $page . "/" . $row['product_id'] . "'><div class='productContainer'><div class='product'><img id='productImage$i' class='productImage' src='"
		 . $row['image_link'] . "'/><p id='productName'>" . $row['product_id'] . "</p><p id='productPrice'>" . $row['price'] .
		" &#x20ac;</p><p id='productDescription'>" . $row['description'] . "</div></div></a>";
		$i++;
        }
/*
	foreach ($result2 as $row) {
                $output .= "<a href='". $page . "/" . $row['product_id'] . "'><div class='productContainer'><div class='product'><img id='productImage$i' class='productImage' src='"
                 . $row['image_link'] . "'/><p id='productName'>" . $row['product_id'] . "</p><p id='productPrice'>" . $row['price'] .
                " &#x20ac;</p><p id='productDescription'>" . $row['description'] . "</div></div></a>";
                $i++;
        }
*/
        $output .= "</div>";

	return $output;

}


function check_user_agent(){
 	$userAgent = $_SERVER['HTTP_USER_AGENT'];
	$os = "";
	if (strpos($userAgent, 'Android') !== false) {
    		$os = "Android";
	}

	if(strpos($userAgent, 'Windows') !== false){
		$os = "Windows";
	}

	if (strpos($userAgent, 'iPhone') !== false){
		$os = "iPhone";
	}

	return "Android";
}

function phones_page(){
	updateCounter();
	$GLOBALS['cassie']->testProduct();
	//return get_products();
	return "puhelimet";
}

function pants_page() {
	updateCounter();
	//return get_products();
	return "housut";
}

function jackets_page(){
	updateCounter();
	return get_products();
}


function get_product_details(){

        $address = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

        $pageUnparsed = explode("/", $address, 3);
        $pageWithSubpage = substr($pageUnparsed[2], strpos($pageUnparsed[2], "/") + 1);
        $page = explode("/", $pageWithSubpage, 2);

        $productWithSpecials = substr(strrchr($address, '/'), 1);
	$product = str_replace("%20"," ", $productWithSpecials);
	$os = "Android";

        $result = $GLOBALS['cassie']->getProductInfo($product);

        $row = $result->first();
	drupal_set_title($row['product_id']);
        $output = "<p id='productDetailPrice'>" . $row['price'] . " &#x20ac;</p><p id='productDetailDescription'>"
	. $row['description']. "</p><img id='productDetailImage' src='" . $row['image_link'] . "'><form method='POST' action=''><br><button type='submit' id='addToCart'".
	" class='cart' name='cart'>Add to cart <i class='fa fa-arrow-right fa-lg'></i><i class='fa fa-shopping-cart fa-lg'></i></button></form>";
	add_to_cart();
        return $output;
}

function check_uuid(){
	if (!isset($_SESSION['uuid'])){
		$_SESSION['uuid'] = UUID::v4();
	}
}

function add_to_cart(){
	if (isset($_POST['cart'])){

       		$address = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

        	$pageUnparsed = explode("/", $address, 3);
        	$pageWithSubpage = substr($pageUnparsed[2], strpos($pageUnparsed[2], "/") + 1);
        	$page = explode("/", $pageWithSubpage, 2);

		$cookie = get_cookie();

		$productWithSpecials = substr(strrchr($address, '/'), 1);
        	$product = str_replace("%20"," ", $productWithSpecials);
		$result = $GLOBALS['cassie']->getProductInfo($product);
		$row = $result->first();
		check_uuid();
		$GLOBALS['cassie']->cartProduct($_SESSION['uuid'], $product, $row['price'], $row['image_link']);


		if (!isset($_COOKIE['count'])){
			//$_SESSION['count'] = 1;
			setcookie("count", 1, time()+3600, '/');
		}else{
			$count = $_COOKIE['count'];
			//$_SESSION['count'] = $count + 1;
			setcookie("count", $count + 1, time()+3600, '/');
		}
		header("Refresh:0");
		drupal_set_message($product . " added to cart.");
	}
}


function phones_details(){
	updateCounter();
	echo $_SESSION['timeListIndex'];
	return get_product_details();
}

function pants_details(){
        return get_product_details();
}

function jackets_details(){
    	return get_product_details();
}

function updateCounter(){

	$address = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";

        $pageWasRefreshed = isset($_SERVER['HTTP_CACHE_CONTROL']) && $_SERVER['HTTP_CACHE_CONTROL'] === 'max-age=0';

        $pageWithSpecials = substr(strrchr($address, '/'), 1);

        $page = str_replace("%20"," ", $pageWithSpecials);

	if (isset($_COOKIE['location'])){
		$cookie = get_cookie();

//        if ($pageWasRefreshed ) {
                $GLOBALS['cassie']->updateCounter($page);
		$GLOBALS['cassie']->updateVisits($cookie[0] , $page);
  //      }

	}
}

function admin_page(){
	$output = "<span>" . l("Add product", "/add") . "</span><br><span>" . l("Update product", "/update") . "</span><br><span>" . l("Delete product", "/delete") . "</span>";
	return $output;
}

function add_product_page($form, &$form_state){
	if (user_access('administer')) {

	       	$form['category'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Category',
                	'#attributes' => array('class' => array('hidevaluetext')),
        	);
        	$form['product'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Product',
                	'#attributes' => array('class' => array('hidevaluetext')),
        	);
		$form['image_link'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Imagelink',
                	'#attributes' => array('class' => array('hidevaluetext')),
        	);
 		$form['priority'] = array(
                	'#type' => 'radios',
                	'#title' => 'Priority',
                	'#attributes' => array('class' => array('hidevaluetext')),
			'#options' =>  array('1'=>t('True'), '0'=>t('False')),
        	);
 		$form['amount'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Amount',
                	'#attributes' => array('class' => array('hidevaluetext')),
        	);
 		$form['price'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Price',
                	'#attributes' => array('class' => array('hidevaluetext')),
        	);
 		$form['description'] = array(
                	'#type' => 'textfield',
                	'#title' => 'Description',
        	        '#attributes' => array('class' => array('hidevaluetext')),
	        );

       	 	$form['submit'] = array(
                	'#type' => 'submit',
                	'#value' => t('Add a new product'),
                	'#attributes' => array('id' => 'addButton'),
        	);
        	return $form;

	}else{
                drupal_set_title("Access denied");
                $output = "You are not authorised to access this page";
		return $form;
        }

}

function add_product_page_submit($form, &$form_state) {
        $newproduct = array(
          'category' => $form_state['values']['category'],
          'product' => $form_state['values']['product'],
          'image_link' => $form_state['values']['image_link'],
          'priority' => $form_state['values']['priority'],
          'amount' => $form_state['values']['amount'],
	  'price' => $form_state['values']['price'],
	  'description' => $form_state['values']['description'],
          'status' => 1,
        );


	$GLOBALS['cassie']->addProduct($newproduct['category'], $newproduct['product'], $newproduct['price'], $newproduct['amount'], $newproduct['description'], $newproduct['image_link'],
	$newproduct['priority']);
	drupal_set_message("Product added." . $newproduct['priority']);
	header("Refresh:0");
}

function update_product_page($form, &$form_state){
	if (user_access('administer')) {

		$array = array();

		$result = $GLOBALS['cassie']->getCategories();
		foreach ($result as $row){
			$array[] = $row['category_id'];
		}

		$form['category'] = array(
    		  '#type' => 'select',
    		  '#options' => $array,
 	 	);

		$form['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Add a new product'),
                        '#attributes' => array('id' => 'addButton'),
                );
		if (!isset($_SESSION['category_id'])){
			$_SESSION['category_id'] = "pants";
		}
                $result = $GLOBALS['cassie']->getProducts($_SESSION['category_id'], 1);

                $output = "<table>";
                foreach ($result as $row){
                         $output .= "<tr><td><a href='fds'><img id='productImage' src='" . $row['image_link'] . "'/></a></td><td>" . $row['product_id'] . "</td>" .
                         "</td><td><form method='POST' action=''><input type='hidden' name='category' value='" . $row['category_id']  . "'>" .
			 "<input type='hidden' name='product' value='" . $row['product_id']  . "'>" .
			 "<input type='hidden' name='price' value='" . $row['price']  . "'>" .
 			 "<input type='hidden' name='amount' value='" . $row['amount']  . "'>" .
			 "<input type='hidden' name='description' value='" . $row['description']  . "'>" .
			 "<input type='hidden' name='image_link' value='" . $row['image_link']  . "'>" .
			 "<input type='hidden' name='priority' value='" . $row['high_priority_segment']  . "'>" .
                         "<button type='submit' id='update" . $row['product_id'] . "' name='updateProduct' class='updateProduct'><i class='fa fa-pencil'></i></button></form></td></tr>";
                }
                $output .= "</table>";

		print render($output);

		update_product();
		return $form;

	}else{
		drupal_set_title("Access denied");
		//return "You are not authorised to access this page";
		return $form;
	}
}

function update_product_page_submit($form, &$form_state){

		//$_SESSION['category_id'] = $form_state['values']['category'];
		/*drupal_set_message($product['category']);
		$result = $GLOBALS['cassie']->getProducts("jackets", 1);

               	$output = "<table>";
                foreach ($result as $row){
                         $output .= "<tr><td><a href='fds'><img id='productImage' src='" . $row['image_link'] . "'/></a></td><td>" . $row['product_id'] . "</td>" .
                         "</td><td><form method='POST' action=''><input type='hidden' name='category' value='" . $row['category_id']  . "'>" .
                         "<input type='hidden' name='product' value='" . $row['product_id']  . "'>" .
                         "<input type='hidden' name='price' value='" . $row['price']  . "'>" .
                         "<input type='hidden' name='amount' value='" . $row['amount']  . "'>" .
                         "<input type='hidden' name='description' value='" . $row['description']  . "'>" .
                         "<input type='hidden' name='image_link' value='" . $row['image_link']  . "'>" .
                         "<input type='hidden' name='priority' value='" . $row['high_priority_segment']  . "'>" .
                         "<button type='submit' id='update" . $row['product_id'] . "' name='updateProduct' class='updateProduct'><i class='fa fa-pencil'></i></button></form></td></tr>";
                }
                $output .= "</table>";
                update_product();
		return $output;*/
}


function productSessionArray($category, $product, $price, $amount, $description, $image_link, $priority){
	$updateProductArray = array($category, $product, $price, $amount, $description, $image_link, $priority);

        $productJson = json_encode($updateProductArray, JSON_UNESCAPED_UNICODE);
        $_SESSION['updateProduct'] = $productJson;
}


function update_product(){
	if (isset($_POST['updateProduct'])){
                //$GLOBALS['cassie']->deleteProduct($_POST['category'], $_POST['product']);
		//$newproduct = new Product("fds", $_POST['product'], 0, "fdsdsf", "fdssd", 0);
		//$updateProductArray = array($_POST['category'], $_POST['product'], $_POST['price'], $_POST['amount'], $_POST['description'], $_POST['image_link'], $_POST['priority']);

                //$productJson = json_encode($updateProductArray, JSON_UNESCAPED_UNICODE);
		//$_SESSION['updateProduct'] = $productJson;
		productSessionArray($_POST['category'], $_POST['product'], $_POST['price'], $_POST['amount'], $_POST['description'], $_POST['image_link'], $_POST['priority']);
		header("Location: /update/" . $_POST['product']);
                //drupal_set_message($_POST['product'] . " deleted from the store.");
        }
}

function update_product_details_page($form, &$form_state){


	$product = $_SESSION['updateProduct'];
        $product = stripslashes($product);
        $productArray = json_decode($product, true);
	drupal_set_title("Update product " . $productArray[1]);

	if (user_access('administer')) {
		$form['category_old'] = array(
                        '#type' => 'hidden',
                        '#title' => 'Category',
                        '#value' => $productArray[0],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['product_old'] = array(
                        '#type' => 'hidden',
                        '#title' => 'Product',
                        '#value' => $productArray[1],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );

                $form['category'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Category',
			'#default_value' => $productArray[0],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['product'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Product',
			'#default_value' => $productArray[1],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['image_link'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Imagelink',
			'#default_value' => $productArray[5],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['priority'] = array(
                        '#type' => 'radios',
                        '#title' => 'Priority',
			'#default_value' => $productArray[6],
                        '#attributes' => array('class' => array('hidevaluetext')),
                        '#options' =>  array('1'=>t('True'), '0'=>t('False')),
                );
                $form['amount'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Amount',
			'#default_value' => $productArray[3],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['price'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Price',
			'#default_value' => $productArray[2],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );
                $form['description'] = array(
                        '#type' => 'textfield',
                        '#title' => 'Description',
			'#default_value' => $productArray[4],
                        '#attributes' => array('class' => array('hidevaluetext')),
                );

                $form['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Update product'),
                        '#attributes' => array('id' => 'updateProduct'),
                );

                return $form;

        }else{
                drupal_set_title("Access denied");
                $output = "You are not authorised to access this page";
                return $form;
	}

}

function update_product_details_page_submit($form, &$form_state){
	$updateProduct = array(
	  'category_old' => $form_state['values']['category_old'],
          'product_old' => $form_state['values']['product_old'],

	  'category' => $form_state['values']['category'],
          'product' => $form_state['values']['product'],
          'image_link' => $form_state['values']['image_link'],
          'priority' => $form_state['values']['priority'],
          'amount' => $form_state['values']['amount'],
          'price' => $form_state['values']['price'],
          'description' => $form_state['values']['description'],
          'status' => 1,
        );


        $GLOBALS['cassie']->updateProduct($updateProduct['category_old'], $updateProduct['product_old'], $updateProduct['category'], $updateProduct['product'],
	$updateProduct['price'], $updateProduct['amount'], $updateProduct['description'], $updateProduct['image_link'], $updateProduct['priority']);
	productSessionArray($updateProduct['category'], $updateProduct['product'],
        $updateProduct['price'], $updateProduct['amount'], $updateProduct['description'], $updateProduct['image_link'], $updateProduct['priority']);
        drupal_set_message($updateProduct['product'] . " updated.");
	header("Refresh:0");
}

function delete_product_page(){
	if (user_access('administer')){

		$result = $GLOBALS['cassie']->getProducts("jackets", 1);

		$output = "<table>";
		foreach ($result as $row){
               		 $output .= "<tr><td><img id='productImage' src='" . $row['image_link'] . "'/></td><td>" . $row['product_id'] . "</td>" .
                	 "</td><td><form method='POST' onsubmit='return confirm('Are you sure you want to submit this form?');'" .
			 "action=''><input type='hidden' name='category' value='jackets' ><input type='hidden' name='product' value='" . $row['product_id'] .
                	 "' ><button type='submit' id='delete" . $row['product_id'] . "' name='deleteProduct'class='deleteProduct' ><i class='fa fa-times'></i></button></form></td></tr>";
        	}
		$output .= "</table>";
		delete_product();
		return $output;
	}else{
		drupal_set_title("Access denied");
                //return "You are not authorised to access this page.";
                return "";
	}
}

function delete_product(){
	if (isset($_POST['deleteProduct'])){
                $GLOBALS['cassie']->deleteProduct($_POST['category'], $_POST['product']);

                header("Refresh:0");
                drupal_set_message($_POST['product'] . " deleted from the store.");
        }

}


function time_logger(){


        //drupal_add_js(drupal_get_path('module', 'cassie') . '/Timer.js');
	//$test = $_GET['time'];
	//echo $test;

	if(!isset($_SESSION["timeListIndex"])){
		$_SESSION["timeListIndex"] = 1;	
	}

	$updated = false;

        if ($_SESSION["timeListIndex"] == 5 && $updated == false){
                //echo "<script>document.getElementById('debug').value = 'in 5. if';</script>";
                $_SESSION["timeListIndex"] = 1;
                $_SESSION["page5_time"] = $_GET["time"];
                $_SESSION["tableFull"] = true;
                $updated = true;
                calcTotalTime();
        }
        if ($_SESSION["timeListIndex"] == 4 && $updated == false){
                //echo "<script>document.getElementById('debug').value = 'in 4. if';</script>";
                $_SESSION["timeListIndex"] = 5;
                $_SESSION["page4_time"] = $_GET["time"];
                $updated = true;
                calcTotalTime();
        }
        if ($_SESSION["timeListIndex"] == 3 && $updated == false){
                //echo "<script>document.getElementById('debug').value = 'in 3. if';</script>";
                $_SESSION["timeListIndex"] = 4;
                $_SESSION["page3_time"] = $_GET["time"];
                $updated = true;
                calcTotalTime();
        }
	if ($_SESSION["timeListIndex"] == 2 && $updated == false){
                //echo "<script>document.getElementById('debug').value = 'in 2. if';</script>";
                $_SESSION["timeListIndex"] = 3;
                $_SESSION["page2_time"] = $_GET["time"];
                $updated = true;
                calcTotalTime();
        }
        if ($_SESSION["timeListIndex"] == 1  && $updated == false || $_SESSION["timeListIndex"] == null){
                //echo "<script>document.getElementById('debug').value = 'in 1. if';</script>";
                $_SESSION["timeListIndex"] = 2;
                $_SESSION["page1_time"] = $_GET["time"];
                calcTotalTime();
        }

	$updated = false;

	return "dsfsd";
}


function calcTotalTime(){
                if($_SESSION["tableFull"] == true){
                        $totalTime = $_SESSION["page1_time"] + $_SESSION["page2_time"] + $_SESSION["page3_time"] + $_SESSION["page4_time"] + $_SESSION["page5_time"];
                        $_SESSION["totalTime"] = $totalTime;

                        if(($totalTime/1000) <= 25){
                                $_SESSION["launchHelp"] = true;
                        } else {
                                $_SESSION["launchHelp"] = false;
                        }
                }
        }

/*
function delete_product_page($form, &$form_state){
	if (user_access('administer')){


		$result = $GLOBALS['cassie']->getCategories();
		$array = array();
		$array[0] = "--- SELECT ---";
		foreach ($result as $row){
			$array[] = $row['category_id'];
		}

		$form['category_id'] = array(
  		  '#title' => t('Category'),
  		  '#type' => 'select',
  		  '#options' => $array,
		);

		$form['submit'] = array(
                        '#type' => 'submit',
                        '#value' => t('Get products'),
                        '#attributes' => array('id' => 'getButton'),
                );
		return $form;
	}else{
		drupal_set_title("Access denied");
		//return "You are not authorised to access this page.";
		return $form;
	}
}

function delete_product_page_submit($form, &$form_state) {
	$product = array(
          'category_id' => $form_state['values']['category_id'],
          'status' => 1,
        );
        $result = $GLOBALS['cassie']->getProducts("jackets");

	/*$outputs = "dsfadsfsadfsda";
        foreach ($result as $row) {
                $output .= "><div class='productContainer'><div class='product'><img id='productImage$i' class='productImage' src='"
                 . $row['image_link'] . "'/><p id='productName'>" . $row['product_id'] . "</p><p id='productPrice'>" . $row['price'] .
                " &#x20ac;</p><p id='productDescription'>" . $row['description'] . "</div></div></a>";
                $i++;
        }
	$output .= "</div>";
	return $output;
}*/




	/** stuff

	$location = file_get_contents('http://freegeoip.net/json/'.$_SERVER['REMOTE_ADDR']);
        $jsonIterator = new RecursiveIteratorIterator(
                new RecursiveArrayIterator(json_decode($location, TRUE)),
                RecursiveIteratorIterator::SELF_FIRST);

        $arrayJson = array();

        foreach ($jsonIterator as $key => $val) {
                if(is_array($val)) {
                   echo "$key:\n";
                } else {
                   $arrayJson[] = $val;
                   //echo "$val\n";

                }
        }

        //$uuids = gen_uuid();
        //$cas = new Cassandra\Uuid();
        //$uuid = $cas->__construct(j);
        $v4uuid = UUID::v4();
        $language = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);
        $ip_address = $arrayJson[0];
        $time_zone = $arrayJson[7];
        $country = $arrayJson[2];
        $region = $arrayJson[4];
        $city = $arrayJson[5];

        $cookieArray = array($v4uuid, $language, $ip_address, $time_zone, $country, $region, $city);

        $cookieJson = json_encode($cookieArray, JSON_UNESCAPED_UNICODE);

        if (empty($_COOKIE["location"])) {
                setcookie("location", $cookieJson, time()+3600);
                $newCassie->insertUsers($v4uuid, $language, $ip_address, $time_zone, $country, $region, $city);
        }



	/**$cookie = $_COOKIE['location'];
        $cookie = stripslashes($cookie);
        $savedArray = json_decode($cookie, true);

        print_r($savedArray);

        */


        /**
        $result2 = $newCassie->printUser();
        $row2 = $result2->first();

        $arrayres = $row2['city'];

        print_r($arrayres);

        */

        //$result = $newCassie->getProducts($page);

        //$array = array();
        //foreach($result as $row){

        //$array[] = $row['products'];
        //}


        //foreach ($result as $row) {
        //      printf("\"%s\" \"%s\"  \n", $row['product_id'], $row['amount']);
        //}

        //$test = "<h1>dfs</h1>\n";
        //$row = $result->first();
        //$test2 = "fdsasadf";
        //$array = array();
        //$array = $row['products']->values();

        //$test = var_export($row['products'], true);


        //for($i = 0; $i < count($array); $i++){
        //      $print = $array[0] + $array[1];
        //}

        //$comma_separated = implode(", ", $array);


